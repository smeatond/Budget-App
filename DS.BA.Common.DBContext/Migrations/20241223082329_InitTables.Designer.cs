// <auto-generated />
using System;
using DS.BA.Common.DbContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DS.BA.Common.DBContext.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241223082329_InitTables")]
    partial class InitTables
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("BudgetExpenditure", b =>
                {
                    b.Property<Guid>("BudgetId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ExpenditureId")
                        .HasColumnType("uuid");

                    b.HasKey("BudgetId", "ExpenditureId");

                    b.HasIndex("ExpenditureId");

                    b.ToTable("BudgetExpenditure");
                });

            modelBuilder.Entity("BudgetIncome", b =>
                {
                    b.Property<Guid>("BudgetId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("IncomeId")
                        .HasColumnType("uuid");

                    b.HasKey("BudgetId", "IncomeId");

                    b.HasIndex("IncomeId");

                    b.ToTable("BudgetIncome");
                });

            modelBuilder.Entity("DS.BA.Common.Models.Database.Entities.BudgetEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("FamilyId")
                        .HasColumnType("uuid");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("LastUpdatedDate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("FamilyId");

                    b.ToTable("Budgets");
                });

            modelBuilder.Entity("DS.BA.Common.Models.Database.Entities.ExpenditureEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("FamilyId")
                        .HasColumnType("uuid");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("LastUpdatedDate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("FamilyId");

                    b.ToTable("Expenditures");
                });

            modelBuilder.Entity("DS.BA.Common.Models.Database.Entities.ExpenditureTypesEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("FamilyId")
                        .HasColumnType("uuid");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("LastUpdatedDate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("FamilyId");

                    b.ToTable("Expenditure Types");
                });

            modelBuilder.Entity("DS.BA.Common.Models.Database.Entities.FamilyEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("LastUpdatedDate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Families");
                });

            modelBuilder.Entity("DS.BA.Common.Models.Database.Entities.IncomeEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("FamilyId")
                        .HasColumnType("uuid");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("LastUpdatedDate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("FamilyId");

                    b.ToTable("Incomes");
                });

            modelBuilder.Entity("DS.BA.Common.Models.Database.Entities.MemberEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Auth0Id")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<Guid>("FamilyId")
                        .HasColumnType("uuid");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("JoinedDate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("LastUpdatedDate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("FamilyId");

                    b.ToTable("Members");
                });

            modelBuilder.Entity("ExpenditureExpenditureType", b =>
                {
                    b.Property<Guid>("ExpenditureId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ExpenditureTypeId")
                        .HasColumnType("uuid");

                    b.HasKey("ExpenditureId", "ExpenditureTypeId");

                    b.HasIndex("ExpenditureTypeId");

                    b.ToTable("ExpenditureExpenditureType");
                });

            modelBuilder.Entity("BudgetExpenditure", b =>
                {
                    b.HasOne("DS.BA.Common.Models.Database.Entities.BudgetEntity", null)
                        .WithMany()
                        .HasForeignKey("BudgetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DS.BA.Common.Models.Database.Entities.ExpenditureEntity", null)
                        .WithMany()
                        .HasForeignKey("ExpenditureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BudgetIncome", b =>
                {
                    b.HasOne("DS.BA.Common.Models.Database.Entities.BudgetEntity", null)
                        .WithMany()
                        .HasForeignKey("BudgetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DS.BA.Common.Models.Database.Entities.IncomeEntity", null)
                        .WithMany()
                        .HasForeignKey("IncomeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DS.BA.Common.Models.Database.Entities.BudgetEntity", b =>
                {
                    b.HasOne("DS.BA.Common.Models.Database.Entities.FamilyEntity", "Family")
                        .WithMany("Budgets")
                        .HasForeignKey("FamilyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Family");
                });

            modelBuilder.Entity("DS.BA.Common.Models.Database.Entities.ExpenditureEntity", b =>
                {
                    b.HasOne("DS.BA.Common.Models.Database.Entities.FamilyEntity", "Family")
                        .WithMany("Expenditures")
                        .HasForeignKey("FamilyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Family");
                });

            modelBuilder.Entity("DS.BA.Common.Models.Database.Entities.ExpenditureTypesEntity", b =>
                {
                    b.HasOne("DS.BA.Common.Models.Database.Entities.FamilyEntity", "Family")
                        .WithMany("ExpenditureTypes")
                        .HasForeignKey("FamilyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Family");
                });

            modelBuilder.Entity("DS.BA.Common.Models.Database.Entities.IncomeEntity", b =>
                {
                    b.HasOne("DS.BA.Common.Models.Database.Entities.FamilyEntity", "Family")
                        .WithMany("Incomes")
                        .HasForeignKey("FamilyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Family");
                });

            modelBuilder.Entity("DS.BA.Common.Models.Database.Entities.MemberEntity", b =>
                {
                    b.HasOne("DS.BA.Common.Models.Database.Entities.FamilyEntity", "Family")
                        .WithMany("Members")
                        .HasForeignKey("FamilyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Family");
                });

            modelBuilder.Entity("ExpenditureExpenditureType", b =>
                {
                    b.HasOne("DS.BA.Common.Models.Database.Entities.ExpenditureTypesEntity", null)
                        .WithMany()
                        .HasForeignKey("ExpenditureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DS.BA.Common.Models.Database.Entities.ExpenditureEntity", null)
                        .WithMany()
                        .HasForeignKey("ExpenditureTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DS.BA.Common.Models.Database.Entities.FamilyEntity", b =>
                {
                    b.Navigation("Budgets");

                    b.Navigation("ExpenditureTypes");

                    b.Navigation("Expenditures");

                    b.Navigation("Incomes");

                    b.Navigation("Members");
                });
#pragma warning restore 612, 618
        }
    }
}
